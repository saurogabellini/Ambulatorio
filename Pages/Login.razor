@page "/login"
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms // Assicurati che questo using sia presente


@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@inject NavigationManager NavigationManager

<h3>Login</h3>

<div class="row">
    <div class="col-md-4">
        @* Mostra un messaggio di caricamento o il form *@
        @if (isProcessing)
        {
            <div class="alert alert-info" role="alert">
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Accesso in corso... attendere prego.
            </div>
        }
        else
        {
            <EditForm Model="@loginModel" OnValidSubmit="ProcessLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-2">
                    @* Aggiunto margin-bottom per spaziatura *@
                    <label for="email">Email</label>
                    @* Usa @bind invece di @bind-Value per semplicità, ma @bind-value funziona uguale *@
                    <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>

                <div class="form-group mb-2">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>

                <div class="form-group form-check mb-2">
                    @* Usato form-check per allineamento checkbox *@
                    <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" />
                    <label class="form-check-label" for="rememberMe">Ricordami</label>
                </div>

                <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                    @* Mostra spinner nel bottone durante il caricamento *@
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    }
                    Login
                </button>
            </EditForm>

            <div class="mt-3">
                <p>Non hai un account? <a href="register">Registrati</a></p>
            </div>

            @* Mostra errore solo se non si sta processando e c'è un errore *@
            @if (!isProcessing && !string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }
        }
    </div>
</div>


@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool isProcessing = false; // Flag per indicare l'elaborazione

    private class LoginModel
    {
        [Required(ErrorMessage = "L'email è obbligatoria")]
        [EmailAddress(ErrorMessage = "Formato email non valido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La password è obbligatoria")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }

    private async Task ProcessLogin()
    {
        errorMessage = null;      // Resetta l'errore
        isProcessing = true;      // Inizia l'elaborazione (blocca UI)
                                  // StateHasChanged();     // Blazor di solito chiama StateHasChanged dopo un evento UI,
                                  // quindi questa chiamata potrebbe non essere necessaria,
                                  // ma puoi aggiungerla se l'UI non si aggiorna subito mostrando "Processing..."

        try
        {
            var result = await SignInManager.PasswordSignInAsync(loginModel.Email,
                                                                loginModel.Password,
                                                                loginModel.RememberMe,
                                                                lockoutOnFailure: false); // L'errore si verificava qui

            if (result.Succeeded)
            {
                // Il login ha funzionato, naviga con forceLoad
                NavigationManager.NavigateTo("/", forceLoad: true);
                // Non fare isProcessing = false; qui, perché la pagina verrà ricaricata
                return; // Esce dal metodo dopo l'avvio della navigazione
            }
            else if (result.IsLockedOut)
            {
                errorMessage = "Account bloccato.";
            }
            else if (result.RequiresTwoFactor)
            {
                // Dovresti gestire questo caso se hai 2FA abilitato
                errorMessage = "Autenticazione a due fattori richiesta.";
                // NavigationManager.NavigateTo("/loginwith2fa");
            }
            else
            {
                errorMessage = "Login fallito. Controlla email e password.";
            }
        }
        catch (Exception ex)
        {
            // È sempre una buona idea loggare eccezioni impreviste
            Console.WriteLine($"Errore imprevisto durante ProcessLogin: {ex}"); // Usa un logger migliore in produzione
            errorMessage = "Si è verificato un errore inaspettato durante il login.";
        }
        finally
        {
            // Assicurati che isProcessing venga resettato SEMPRE,
            // tranne nel caso di successo con navigazione (dove la pagina ricarica comunque)
            isProcessing = false;
            // StateHasChanged(); // Potrebbe essere necessario chiamarlo qui esplicitamente
            // per assicurarsi che l'UI si aggiorni e rimuova il messaggio
            // "Processing..." mostrando eventuali errori.
        }
    }
}