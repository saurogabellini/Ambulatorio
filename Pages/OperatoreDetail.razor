@page "/operatore/{Id:int}"
@using AmbulatorioApp.Data
@using AmbulatorioApp.Data.Models
@inject ApplicationDbContext DbContext
@inject NavigationManager NavigationManager

<h3>@(Id == 0 ? "Nuovo Operatore" : "Modifica Operatore")</h3>

<div class="row">
    <div class="col-md-6">
        <div class="form-group mb-3">
            <label for="cognome">Cognome</label>
            <input type="text" class="form-control" id="cognome" @bind="operatore.Cognome" required />
            @if (string.IsNullOrEmpty(operatore.Cognome) && isSubmitted)
            {
                <div class="text-danger">Il cognome è obbligatorio</div>
            }
        </div>

        <div class="form-group mb-3">
            <label for="nome">Nome</label>
            <input type="text" class="form-control" id="nome" @bind="operatore.Nome" required />
            @if (string.IsNullOrEmpty(operatore.Nome) && isSubmitted)
            {
                <div class="text-danger">Il nome è obbligatorio</div>
            }
        </div>

        <div class="form-group mb-3">
            <label for="codiceFiscale">Codice Fiscale</label>
            <input type="text" class="form-control" id="codiceFiscale" @bind="operatore.CodiceFiscale" maxlength="16" required />
            @if (string.IsNullOrEmpty(operatore.CodiceFiscale) && isSubmitted)
            {
                <div class="text-danger">Il codice fiscale è obbligatorio</div>
            }
            @if (!string.IsNullOrEmpty(operatore.CodiceFiscale) && operatore.CodiceFiscale.Length != 16 && isSubmitted)
            {
                <div class="text-danger">Il codice fiscale deve essere di 16 caratteri</div>
            }
        </div>

        <div class="form-group mb-3">
            <label for="recapiti">Recapiti</label>
            <input type="text" class="form-control" id="recapiti" @bind="operatore.Recapiti" />
        </div>

        <div class="form-group mb-3">
            <label for="specializzazione">Specializzazione</label>
            <input type="text" class="form-control" id="specializzazione" @bind="operatore.Specializzazione" />
        </div>

        <div class="form-group mb-3">
            <button class="btn btn-primary" @onclick="SaveOperatore">Salva</button>
            <button class="btn btn-secondary" @onclick="GoBack">Annulla</button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Operatore operatore = new Operatore();
    private bool isSubmitted = false;

    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            // Modifica di un operatore esistente
            var existingOperatore = await Task.Run(() => DbContext.Operatori.Find(Id));
            if (existingOperatore != null)
            {
                operatore = existingOperatore;
            }
        }
    }

    private async Task SaveOperatore()
    {
        isSubmitted = true;

        // Validazione
        if (string.IsNullOrEmpty(operatore.Cognome) || 
            string.IsNullOrEmpty(operatore.Nome) || 
            string.IsNullOrEmpty(operatore.CodiceFiscale) ||
            operatore.CodiceFiscale.Length != 16)
        {
            return;
        }

        if (Id == 0)
        {
            // Nuovo operatore
            DbContext.Operatori.Add(operatore);
        }
        else
        {
            // Aggiornamento operatore esistente
            DbContext.Operatori.Update(operatore);
        }

        await DbContext.SaveChangesAsync();
        GoBack();
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/operatori");
    }
}
