// <auto-generated />
using System;
using AmbulatorioApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AmbulatorioApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250406102556_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmbulatorioApp.Data.Models.Assenza", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DataOraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataOraInizio")
                        .HasColumnType("datetime2");

                    b.Property<string>("Motivo")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("OperatoreId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatoreId");

                    b.ToTable("Assenze");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.Operatore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CodiceFiscale")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Recapiti")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Specializzazione")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operatori");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.Prenotazione", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CognomeCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("DataOraFine")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataOraInizio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPrenotazione")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OperatoreId")
                        .HasColumnType("int");

                    b.Property<int>("ServizioId")
                        .HasColumnType("int");

                    b.Property<int>("SlotDisponibilitaId")
                        .HasColumnType("int");

                    b.Property<string>("TelefonoCliente")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OperatoreId");

                    b.HasIndex("ServizioId");

                    b.HasIndex("SlotDisponibilitaId");

                    b.ToTable("Prenotazioni");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.Servizio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Servizi");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.SlotDisponibilita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Attivo")
                        .HasColumnType("bit");

                    b.Property<int?>("CicloGiorni")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DataFineValidita")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DataInizioValidita")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurataMinuti")
                        .HasColumnType("int");

                    b.Property<int>("GiornoSettimana")
                        .HasColumnType("int");

                    b.Property<int>("OperatoreId")
                        .HasColumnType("int");

                    b.Property<string>("OraFine")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("OraInizio")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<int>("ServizioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperatoreId");

                    b.HasIndex("ServizioId");

                    b.ToTable("SlotDisponibilita");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.Assenza", b =>
                {
                    b.HasOne("AmbulatorioApp.Data.Models.Operatore", "Operatore")
                        .WithMany("Assenze")
                        .HasForeignKey("OperatoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operatore");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.Prenotazione", b =>
                {
                    b.HasOne("AmbulatorioApp.Data.Models.Operatore", "Operatore")
                        .WithMany("Prenotazioni")
                        .HasForeignKey("OperatoreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmbulatorioApp.Data.Models.Servizio", "Servizio")
                        .WithMany("Prenotazioni")
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AmbulatorioApp.Data.Models.SlotDisponibilita", "SlotDisponibilita")
                        .WithMany("Prenotazioni")
                        .HasForeignKey("SlotDisponibilitaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Operatore");

                    b.Navigation("Servizio");

                    b.Navigation("SlotDisponibilita");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.SlotDisponibilita", b =>
                {
                    b.HasOne("AmbulatorioApp.Data.Models.Operatore", "Operatore")
                        .WithMany("SlotDisponibilita")
                        .HasForeignKey("OperatoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AmbulatorioApp.Data.Models.Servizio", "Servizio")
                        .WithMany("SlotDisponibilita")
                        .HasForeignKey("ServizioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Operatore");

                    b.Navigation("Servizio");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.Operatore", b =>
                {
                    b.Navigation("Assenze");

                    b.Navigation("Prenotazioni");

                    b.Navigation("SlotDisponibilita");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.Servizio", b =>
                {
                    b.Navigation("Prenotazioni");

                    b.Navigation("SlotDisponibilita");
                });

            modelBuilder.Entity("AmbulatorioApp.Data.Models.SlotDisponibilita", b =>
                {
                    b.Navigation("Prenotazioni");
                });
#pragma warning restore 612, 618
        }
    }
}
